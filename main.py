# -*- coding: utf-8 -*-

# --- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ---
import telebot
from telebot import types
import sqlite3
import os  # <-- –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º
from datetime import datetime, timedelta

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ---
# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Replit.
# –≠—Ç–æ—Ç –∫–æ–¥ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç, –æ–Ω –≤—ã–≤–µ–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É.
try:
    TOKEN = os.environ['TOKEN']
except KeyError:
    print("--- –û–®–ò–ë–ö–ê ---")
    print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Replit (Secrets).")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'Secrets' (–∏–∫–æ–Ω–∫–∞ –∑–∞–º–∫–∞ üîí).")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç: –∫–ª—é—á (key) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'TOKEN', –∞ –∑–Ω–∞—á–µ–Ω–∏–µ (value) - –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.")
    exit()


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –î–ê–ù–ù–´–• ---
bot = telebot.TeleBot(TOKEN)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã
user_data = {}


# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (SQLite) ---

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS profiles (
        user_id INTEGER PRIMARY KEY,
        telegram_username TEXT,
        nickname TEXT,
        winrate INTEGER,
        line TEXT,
        rank TEXT,
        mythic_rank TEXT,
        goal TEXT,
        about TEXT,
        photo_id TEXT,
        last_active TIMESTAMP
    )''')
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–∞–π–∫–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS likes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        liker_id INTEGER,
        liked_id INTEGER,
        FOREIGN KEY (liker_id) REFERENCES profiles(user_id),
        FOREIGN KEY (liked_id) REFERENCES profiles(user_id)
    )''')
    conn.commit()
    conn.close()

def user_exists(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ."""
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,))
    exists = cursor.fetchone() is not None
    conn.close()
    return exists

def update_last_active(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE profiles SET last_active = ? WHERE user_id = ?", (datetime.now(), user_id))
    conn.commit()
    conn.close()

def save_profile(user_id, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM profiles WHERE user_id = ?", (user_id,))
    exists = cursor.fetchone()
    if exists:
        cursor.execute('''
        UPDATE profiles SET telegram_username = ?, nickname = ?, winrate = ?, line = ?, rank = ?, mythic_rank = ?, goal = ?, about = ?, photo_id = ?, last_active = ? WHERE user_id = ?
        ''', (data.get('telegram_username'), data.get('nickname'), data.get('winrate'), data.get('line'), data.get('rank'), data.get('mythic_rank'), data.get('goal'), data.get('about'), data.get('photo_id'), datetime.now(), user_id))
    else:
        cursor.execute('''
        INSERT INTO profiles (user_id, telegram_username, nickname, winrate, line, rank, mythic_rank, goal, about, photo_id, last_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, data.get('telegram_username'), data.get('nickname'), data.get('winrate'), data.get('line'), data.get('rank'), data.get('mythic_rank'), data.get('goal'), data.get('about'), data.get('photo_id'), datetime.now()))
    conn.commit()
    conn.close()

def get_profile(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM profiles WHERE user_id = ?", (user_id,))
    profile_data = cursor.fetchone()
    conn.close()
    if profile_data:
        keys = ["user_id", "telegram_username", "nickname", "winrate", "line", "rank", "mythic_rank", "goal", "about", "photo_id", "last_active"]
        return dict(zip(keys, profile_data))
    return None

def delete_profile(user_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–∞–π–∫–∏."""
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM profiles WHERE user_id = ?", (user_id,))
    cursor.execute("DELETE FROM likes WHERE liker_id = ? OR liked_id = ?", (user_id, user_id))
    conn.commit()
    conn.close()


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ (ReplyKeyboardMarkup) ---

def create_start_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("üî• –ù–∞—á–∞—Ç—å"), types.KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"))
    return markup

def create_fill_profile_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    return markup

def create_line_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("Gold Line", "Rome", "–°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è")
    markup.row("–õ–µ—Å", "XP Line", "–í–µ–∑–¥–µ")
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup

def create_rank_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("–í–æ–∏–Ω", "–≠–ª–∏—Ç–∞", "–ú–∞—Å—Ç–µ—Ä")
    markup.row("–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä", "–≠–ø–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞")
    markup.add("–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π")
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup

def create_mythic_rank_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("–ú–∏—Ñ", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è —á–µ—Å—Ç—å")
    markup.row("–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å–ª–∞–≤–∞", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π")
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup
    
def create_goal_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ü–æ–¥–Ω—è—Ç—å —Ä–∞–Ω–≥", "–ü–æ–∏–≥—Ä–∞—Ç—å –¥–ª—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è", "–ù–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup

def create_photo_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"), types.KeyboardButton("‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    return markup

def create_skip_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
    return markup

def create_main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", "‚öôÔ∏è –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–∞")
    markup.row("üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", "‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è")
    return markup

def create_my_profile_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É"), types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é"))
    return markup

def create_confirm_delete_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"))
    return markup

def create_search_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", "üëé –°–ª–µ–¥—É—é—â–∏–π", "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫")
    return markup

def create_liked_by_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç", "üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚èπÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    return markup


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def format_profile(profile_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if not profile_data: return "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    mythic_rank_str = f"\nüèÖ –£—Ä–æ–≤–µ–Ω—å –º–∏—Ñ–∞: {profile_data['mythic_rank']}" if profile_data.get('mythic_rank') else ""
    about_str = f"\nüí¨ –û —Å–µ–±–µ: {profile_data['about']}" if profile_data.get('about') else ""
    text = (f"üë§ –ù–∏–∫: {profile_data['nickname']}\n"
            f"üìä Winrate: {profile_data['winrate']}%\n"
            f"‚öîÔ∏è –õ–∏–Ω–∏—è: {profile_data['line']}\n"
            f"üèÜ –†–∞–Ω–≥: {profile_data['rank']}{mythic_rank_str}\n"
            f"üéØ –¶–µ–ª—å: {profile_data['goal']}{about_str}")
    return text


# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    if user_exists(user_id):
        update_last_active(user_id)
        bot.send_message(user_id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_main_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è Mobile Legends?", reply_markup=create_start_keyboard())

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    user_data.pop(message.from_user.id, None) 
    send_welcome(message)


# --- –°–¶–ï–ù–ê–†–ò–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ê–ù–ö–ï–¢–´ ---

@bot.message_handler(func=lambda message: message.text in ["üî• –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –û –Ω–∞—Å", "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"])
def handle_start_options(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    if message.text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        bot.send_message(user_id, "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ.", reply_markup=create_fill_profile_keyboard())
        return
    bot.send_message(user_id, "‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∞–Ω–∫–µ—Ç—É –∏ –±—É–¥–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.", reply_markup=types.ReplyKeyboardRemove())
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:")
    bot.register_next_step_handler(msg, process_nickname_step)

def process_nickname_step(message):
    """–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞."""
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return back_to_start(message)
    user_data[user_id] = {'nickname': message.text}
    msg = bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à winrate –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 58):")
    bot.register_next_step_handler(msg, process_winrate_step)

def process_winrate_step(message):
    """–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ winrate."""
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return back_to_start(message)
    try:
        winrate = int(message.text)
        if not (0 <= winrate <= 100): raise ValueError()
        user_data[user_id]['winrate'] = winrate
        msg = bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –ª–∏–Ω–∏–∏ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?", reply_markup=create_line_keyboard())
        bot.register_next_step_handler(msg, process_line_step)
    except (ValueError, TypeError):
        msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à winrate —Ü–∏—Ñ—Ä–∞–º–∏ (–æ—Ç 0 –¥–æ 100).")
        bot.register_next_step_handler(msg, process_winrate_step)

def process_line_step(message):
    """–®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–Ω–∏–∏."""
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return back_to_start(message)
    if message.text not in ["Gold Line", "Rome", "–°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è", "–õ–µ—Å", "XP Line", "–í–µ–∑–¥–µ"]:
        msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=create_line_keyboard())
        bot.register_next_step_handler(msg, process_line_step)
        return
    user_data[user_id]['line'] = message.text
    msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:", reply_markup=create_rank_keyboard())
    bot.register_next_step_handler(msg, process_rank_step)

def process_rank_step(message):
    """–®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞."""
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return back_to_start(message)
    if message.text not in ["–í–æ–∏–Ω", "–≠–ª–∏—Ç–∞", "–ú–∞—Å—Ç–µ—Ä", "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä", "–≠–ø–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"]:
        msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=create_rank_keyboard())
        bot.register_next_step_handler(msg, process_rank_step)
        return
    user_data[user_id]['rank'] = message.text
    if message.text == "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π":
        msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –º–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–Ω–≥–∞:", reply_markup=create_mythic_rank_keyboard())
        bot.register_next_step_handler(msg, process_mythic_rank_step)
    else:
        user_data[user_id]['mythic_rank'] = None
        ask_goal_step(user_id)

def process_mythic_rank_step(message):
    """–®–∞–≥ 4.1: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –º–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–Ω–≥–∞."""
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return back_to_start(message)
    if message.text not in ["–ú–∏—Ñ", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è —á–µ—Å—Ç—å", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è —Å–ª–∞–≤–∞", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π"]:
        msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=create_mythic_rank_keyboard())
        bot.register_next_step_handler(msg, process_mythic_rank_step)
        return
    user_data[user_id]['mythic_rank'] = message.text
    ask_goal_step(user_id)

def ask_goal_step(user_id):
    """–®–∞–≥ 5: –ó–∞–ø—Ä–æ—Å —Ü–µ–ª–∏ –∏–≥—Ä—ã."""
    msg = bot.send_message(user_id, "–ö–∞–∫–∞—è –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –≤ –∏–≥—Ä–µ? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–¥–µ–π —Å–æ —Å—Ö–æ–∂–∏–º–∏ —Ü–µ–ª—è–º–∏.", reply_markup=create_goal_keyboard())
    bot.register_next_step_handler(msg, process_goal_step)

def process_goal_step(message):
    """–®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –∏–≥—Ä—ã."""
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return back_to_start(message)
    if message.text not in ["–ü–æ–¥–Ω—è—Ç—å —Ä–∞–Ω–≥", "–ü–æ–∏–≥—Ä–∞—Ç—å –¥–ª—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è", "–ù–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É"]:
        msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=create_goal_keyboard())
        bot.register_next_step_handler(msg, process_goal_step)
        return
    user_data[user_id]['goal'] = message.text
    msg = bot.send_message(user_id, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∞—à —Å—Ç–∏–ª—å –∏–≥—Ä—ã, –ª—é–±–∏–º—ã–µ –≥–µ—Ä–æ–∏). –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", reply_markup=create_skip_keyboard())
    bot.register_next_step_handler(msg, process_about_step)

def process_about_step(message):
    """–®–∞–≥ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ."""
    user_id = message.from_user.id
    user_data[user_id]['about'] = None if message.text == "‚û°Ô∏è –î–∞–ª–µ–µ" else message.text
    msg = bot.send_message(user_id, "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –¥–æ–≤–µ—Ä–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤?", reply_markup=create_photo_keyboard())
    bot.register_next_step_handler(msg, process_photo_step)

def process_photo_step(message):
    """–®–∞–≥ 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
    user_id = message.from_user.id
    if message.text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        msg = bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_final_photo_upload)
    elif message.text == "‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        user_data[user_id]['photo_id'] = None
        finalize_profile(user_id, message.from_user.username)
    else:
        msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=create_photo_keyboard())
        bot.register_next_step_handler(msg, process_photo_step)

@bot.message_handler(content_types=['photo'])
def process_final_photo_upload(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    if message.from_user.id in user_data:
        user_id = message.from_user.id
        user_data[user_id]['photo_id'] = message.photo[-1].file_id
        finalize_profile(user_id, message.from_user.username)
    else:
        bot.send_message(message.from_user.id, "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.")

def finalize_profile(user_id, username):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –≤ –ë–î, –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_data[user_id]['telegram_username'] = username
    save_profile(user_id, user_data[user_id])
    user_data.pop(user_id, None)
    bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=create_main_menu_keyboard())


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---

@bot.message_handler(func=lambda message: message.text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
def my_profile_handler(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    update_last_active(user_id)
    profile = get_profile(user_id)
    if profile:
        caption = format_profile(profile)
        if profile.get('photo_id'):
            bot.send_photo(user_id, profile['photo_id'], caption=caption, reply_markup=create_my_profile_keyboard())
        else:
            bot.send_message(user_id, caption, reply_markup=create_my_profile_keyboard())
    else:
        bot.send_message(user_id, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=create_fill_profile_keyboard())

@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
def delete_profile_confirm(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã."""
    bot.send_message(message.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=create_confirm_delete_keyboard())

@bot.message_handler(func=lambda message: message.text in ["–î–∞, —É–¥–∞–ª–∏—Ç—å", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"])
def process_delete_confirmation(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = message.from_user.id
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å":
        delete_profile(user_id)
        bot.send_message(user_id, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        send_welcome(message)
    else:
        my_profile_handler(message)

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
def edit_profile_handler(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)."""
    bot.send_message(message.from_user.id, "–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.")
    handle_start_options(message)


# --- –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê –ò –õ–ê–ô–ö–û–í ---
search_sessions = {}  # –•—Ä–∞–Ω–∏—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–∏—Å–∫–∞: {user_id: {'profiles': [], 'current_index': 0}}

@bot.message_handler(func=lambda message: message.text == "üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")
def quick_search_handler(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."""
    user_id = message.from_user.id
    update_last_active(user_id)
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    time_threshold = datetime.now() - timedelta(minutes=10) # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
    cursor.execute("SELECT user_id FROM profiles WHERE user_id != ? AND last_active >= ?", (user_id, time_threshold))
    profiles_found = [row[0] for row in cursor.fetchall()]
    conn.close()
    if not profiles_found:
        bot.send_message(user_id, "üòî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu_keyboard())
        return
    search_sessions[user_id] = {'profiles': profiles_found, 'current_index': 0}
    show_next_profile_in_search(user_id)

def show_next_profile_in_search(user_id, is_liked_by_flow=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞."""
    session = search_sessions.get(user_id)
    if not session or session['current_index'] >= len(session['profiles']):
        bot.send_message(user_id, "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=create_main_menu_keyboard())
        search_sessions.pop(user_id, None)
        return
    next_profile_id = session['profiles'][session['current_index']]
    profile_data = get_profile(next_profile_id)
    if not profile_data: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
        session['current_index'] += 1
        show_next_profile_in_search(user_id, is_liked_by_flow)
        return
    caption = format_profile(profile_data)
    markup = create_liked_by_keyboard() if is_liked_by_flow else create_search_keyboard()
    if profile_data.get('photo_id'):
        bot.send_photo(user_id, profile_data['photo_id'], caption=caption, reply_markup=markup)
    else:
        bot.send_message(user_id, caption, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["üëé –°–ª–µ–¥—É—é—â–∏–π", "üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"])
def next_profile_handler(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –≤ –ø–æ–∏—Å–∫–µ."""
    user_id = message.from_user.id
    update_last_active(user_id)
    if user_id in search_sessions:
        search_sessions[user_id]['current_index'] += 1
        is_liked_by_flow = message.text == "üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        show_next_profile_in_search(user_id, is_liked_by_flow)

@bot.message_handler(func=lambda message: message.text in ["‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫", "‚èπÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "‚¨ÖÔ∏è –í –º–µ–Ω—é"])
def stop_search_handler(message):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é."""
    user_id = message.from_user.id
    search_sessions.pop(user_id, None)
    bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_main_menu_keyboard())

@bot.message_handler(func=lambda message: message.text in ["‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", "‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç"])
def like_handler(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –º—ç—Ç—á."""
    liker_id = message.from_user.id
    update_last_active(liker_id)
    if liker_id not in search_sessions: return
    session = search_sessions[liker_id]
    if session['current_index'] >= len(session['profiles']): return
    liked_id = session['profiles'][session['current_index']]
    
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM likes WHERE liker_id = ? AND liked_id = ?", (liker_id, liked_id))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO likes (liker_id, liked_id) VALUES (?, ?)", (liker_id, liked_id))
        conn.commit()
    bot.send_message(liker_id, "‚úÖ –í–∞—à –ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ (–º—ç—Ç—á)
    cursor.execute("SELECT 1 FROM likes WHERE liker_id = ? AND liked_id = ?", (liked_id, liker_id))
    is_match = cursor.fetchone() is not None
    conn.close()

    if is_match:
        liker_profile = get_profile(liker_id)
        liked_profile = get_profile(liked_id)
        if liker_profile and liked_profile:
            liker_username = f"@{liker_profile['telegram_username']}" if liker_profile.get('telegram_username') else "–ø—Ä–æ—Ñ–∏–ª—å"
            liked_username = f"@{liked_profile['telegram_username']}" if liked_profile.get('telegram_username') else "–ø—Ä–æ—Ñ–∏–ª—å"
            bot.send_message(liker_id, f"üéâ –ú—ç—Ç—á! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –∏–≥—Ä–æ–∫—É {liked_profile['nickname']}. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ: {liked_username}")
            bot.send_message(liked_id, f"üéâ –ú—ç—Ç—á! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –∏–≥—Ä–æ–∫—É {liker_profile['nickname']}. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ: {liker_username}")

    is_liked_by_flow = message.text == "‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç"
    search_sessions[liker_id]['current_index'] += 1
    show_next_profile_in_search(liker_id, is_liked_by_flow)

@bot.message_handler(func=lambda message: message.text == "‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è")
def liked_by_list_handler(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    update_last_active(user_id)
    conn = sqlite3.connect('mlbb_finder.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT l1.liker_id FROM likes l1 WHERE l1.liked_id = ? AND NOT EXISTS (SELECT 1 FROM likes l2 WHERE l2.liker_id = ? AND l2.liked_id = l1.liker_id)
    ''', (user_id, user_id))
    profiles_found = [row[0] for row in cursor.fetchall()]
    conn.close()
    if not profiles_found:
        bot.send_message(user_id, "üòî –ü–æ–∫–∞ —á—Ç–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤–∞—Å —Å–∫–æ—Ä–æ –∑–∞–º–µ—Ç—è—Ç!", reply_markup=create_main_menu_keyboard())
        return
    bot.send_message(user_id, "üíå –≠—Ç–∏ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ—è–≤–∏–ª–∏ –∫ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å. –ü–æ—Å–º–æ—Ç—Ä–∏–º?")
    search_sessions[user_id] = {'profiles': profiles_found, 'current_index': 0}
    show_next_profile_in_search(user_id, is_liked_by_flow=True)

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–∞")
def detailed_search_handler(message):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    update_last_active(message.from_user.id)
    bot.send_message(message.from_user.id, "üõ† –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=create_main_menu_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_all_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–æ—à–µ–ª –ø–æ–¥ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    user_id = message.from_user.id
    if user_exists(user_id):
        update_last_active(user_id)
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=create_main_menu_keyboard())
    else:
        send_welcome(message)


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling(none_stop=True)
